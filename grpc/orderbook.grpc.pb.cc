// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: orderbook.proto

#include "orderbook.pb.h"
#include "orderbook.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace orderbook {

static const char* OrderBookService_method_names[] = {
  "/orderbook.OrderBookService/GetOrderBook",
  "/orderbook.OrderBookService/GetAvailableSymbols",
};

std::unique_ptr< OrderBookService::Stub> OrderBookService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderBookService::Stub> stub(new OrderBookService::Stub(channel, options));
  return stub;
}

OrderBookService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOrderBook_(OrderBookService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAvailableSymbols_(OrderBookService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderBookService::Stub::GetOrderBook(::grpc::ClientContext* context, const ::orderbook::OrderBookRequest& request, ::orderbook::OrderBookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orderbook::OrderBookRequest, ::orderbook::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrderBook_, context, request, response);
}

void OrderBookService::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::orderbook::OrderBookRequest* request, ::orderbook::OrderBookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orderbook::OrderBookRequest, ::orderbook::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, std::move(f));
}

void OrderBookService::Stub::async::GetOrderBook(::grpc::ClientContext* context, const ::orderbook::OrderBookRequest* request, ::orderbook::OrderBookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrderBook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>* OrderBookService::Stub::PrepareAsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orderbook::OrderBookResponse, ::orderbook::OrderBookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrderBook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orderbook::OrderBookResponse>* OrderBookService::Stub::AsyncGetOrderBookRaw(::grpc::ClientContext* context, const ::orderbook::OrderBookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrderBookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrderBookService::Stub::GetAvailableSymbols(::grpc::ClientContext* context, const ::orderbook::Empty& request, ::orderbook::SymbolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::orderbook::Empty, ::orderbook::SymbolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAvailableSymbols_, context, request, response);
}

void OrderBookService::Stub::async::GetAvailableSymbols(::grpc::ClientContext* context, const ::orderbook::Empty* request, ::orderbook::SymbolsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::orderbook::Empty, ::orderbook::SymbolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableSymbols_, context, request, response, std::move(f));
}

void OrderBookService::Stub::async::GetAvailableSymbols(::grpc::ClientContext* context, const ::orderbook::Empty* request, ::orderbook::SymbolsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAvailableSymbols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::orderbook::SymbolsResponse>* OrderBookService::Stub::PrepareAsyncGetAvailableSymbolsRaw(::grpc::ClientContext* context, const ::orderbook::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::orderbook::SymbolsResponse, ::orderbook::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAvailableSymbols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::orderbook::SymbolsResponse>* OrderBookService::Stub::AsyncGetAvailableSymbolsRaw(::grpc::ClientContext* context, const ::orderbook::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAvailableSymbolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrderBookService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderBookService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderBookService::Service, ::orderbook::OrderBookRequest, ::orderbook::OrderBookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderBookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orderbook::OrderBookRequest* req,
             ::orderbook::OrderBookResponse* resp) {
               return service->GetOrderBook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderBookService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderBookService::Service, ::orderbook::Empty, ::orderbook::SymbolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrderBookService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::orderbook::Empty* req,
             ::orderbook::SymbolsResponse* resp) {
               return service->GetAvailableSymbols(ctx, req, resp);
             }, this)));
}

OrderBookService::Service::~Service() {
}

::grpc::Status OrderBookService::Service::GetOrderBook(::grpc::ServerContext* context, const ::orderbook::OrderBookRequest* request, ::orderbook::OrderBookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderBookService::Service::GetAvailableSymbols(::grpc::ServerContext* context, const ::orderbook::Empty* request, ::orderbook::SymbolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace orderbook
#include <grpcpp/ports_undef.inc>

